{
  "x-actionschema": "0.0.1",
  "$schema": "https://raw.githubusercontent.com/CodeFromAnywhere/ActionSchema/main/schemas/openapi.schema.json",
  "openapi": "3.0.0",
  "info": {
    "title": "Agent OpenAPI",
    "version": "1.0",
    "description": ""
  },
  "servers": [{ "url": "https://agent.actionschema.com" }],
  "paths": {
    "/api/upsertToolAgent": {
      "post": {
        "summary": "",
        "operationId": "upsertToolAgent",
        "description": "Creates a new agent.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ToolAgent" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Signup response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertToolAgentResponse"
                }
              }
            }
          }
        }
      }
    },

    "/{agentSlug}/oauth2Callback": {
      "get": {
        "summary": "Callback for oauth",
        "operationId": "oauth2Callback",
        "description": "Callback for oauth2",

        "parameters": [
          {
            "in": "path",
            "name": "agentSlug",
            "schema": { "type": "string" },
            "required": true
          },
          {
            "description": "The code that can be used to call the access token url",
            "in": "query",
            "name": "code",
            "schema": { "type": "string" },
            "required": false
          }
        ],

        "responses": {
          "200": {
            "description": "OAuth2 Callback Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": { "type": "string" },
                    "token_type": { "type": "string" },
                    "scope": { "type": "string" },
                    "error": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      }
    },

    "/{agentSlug}/openapi.json": {
      "get": {
        "summary": "Get openapi for this agent alone",
        "operationId": "renderAgentOpenapi",

        "responses": {
          "200": {
            "description": "OpenAPI",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "https://raw.githubusercontent.com/CodeFromAnywhere/ActionSchema/main/schemas/openapi.schema.json"
                    },
                    {
                      "type": "object",
                      "required": ["isSuccessful"],
                      "properties": {
                        "isSuccessful": {
                          "type": "boolean"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "agentSlug",
          "schema": { "type": "string" },
          "required": true
        }
      ]
    },

    "/{agentSlug}/details": {
      "post": {
        "security": [{ "apiKey": [] }],

        "summary": "Get details for this agent",
        "operationId": "renderAgentDetails",
        "parameters": [
          {
            "in": "path",
            "name": "agentSlug",
            "schema": { "type": "string" },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "isSuccessful": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

    "/{agentSlug}/message": {
      "parameters": [
        {
          "in": "path",
          "name": "agentSlug",
          "schema": { "type": "string" },
          "required": true
        },
        {
          "in": "header",
          "name": "X_AGENT_AUTH_TOKEN",
          "schema": { "type": "string" },
          "required": true,
          "description": "Agent-wide authorization token to prevent runaway token usage."
        },
        {
          "in": "header",
          "name": "Authorization",
          "schema": { "type": "string", "minLength": 64 },
          "required": true,
          "description": "User-level authorization that can be retreived via the signup endpoint"
        }
      ],
      "post": {
        "security": [{ "apiKey": [] }],

        "summary": "Run a message in a thread of an assistant",
        "operationId": "message",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/MessageContext" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OpenAPI",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MessageResponse" }
              }
            }
          }
        }
      }
    },

    "/{agentSlug}/userSignup": {
      "parameters": [
        {
          "in": "path",
          "name": "agentSlug",
          "schema": { "type": "string" },
          "required": true
        }
      ],

      "post": {
        "summary": "Signup as a user to this agent. Generates an authToken to which login credentials can be stored.",
        "operationId": "userSignup",
        "responses": {
          "200": {
            "description": "Authorization Token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "authToken": { "type": "string", "minLength": 64 }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "security": [{}],
  "components": {
    "securitySchemes": {
      "apiKey": {
        "type": "http",
        "scheme": "bearer",
        "description": "Access token that needs to be provided to get access to any endpoint."
      }
    },
    "schemas": {
      "ToolAgent": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "agentSlug",
          "instructions",
          "openaiSecretKey",
          "agentAuthToken",
          "adminAuthToken"
        ],
        "properties": {
          "agentSlug": {
            "type": "string",
            "title": "Unique name",
            "$ref": "#/components/schemas/UrlSlug"
          },

          "instructions": {
            "type": "string"
          },

          "openaiSecretKey": {
            "type": "string",
            "description": "OpenAI Secret key. To create one, visit: https://platform.openai.com/api-keys"
          },

          "agentAuthToken": {
            "type": "string",
            "description": "Agent-wide token needed for authorizing to the agent openapi.",
            "minLength": 64,
            "maxLength": 128
          },

          "adminAuthToken": {
            "type": "string",
            "description": "Token needed for authorizing as admin to alter or remove the agent.",
            "minLength": 64,
            "maxLength": 128
          },

          "model": {
            "type": "string",
            "enum": ["gpt-4o", "gpt-3.5-turbo", "gpt-3.5-turbo-16k"]
          },

          "openapiUrl": {
            "type": "string",
            "description": "Used for tools for the agent"
          },

          "openapiAuthToken": {
            "type": "string",
            "description": "Used to authenticate to the OpenAPI to use tools"
          }
        }
      },

      "UrlSlug": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9._~-]+$",
        "minLength": 1,
        "maxLength": 64,
        "description": "Slug compatible with URLs"
      },

      "UpsertToolAgentResponse": {
        "type": "object",
        "properties": {
          "isSuccessful": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "result": { "$ref": "#/components/schemas/ToolAgent" }
        },
        "required": ["isSuccessful", "message"]
      },

      "MessageContext": {
        "type": "object",
        "properties": {
          "message": { "type": "string" },
          "threadId": {
            "type": "string",
            "description": "Can be specified to open a specific thread without history, and continue on that thread upon consequent messages. If no threadId is specified, will take the history of the first thread"
          },
          "disableHistory": {
            "type": "boolean",
            "description": "If given, will not use thread history messages regardless of the threadId."
          },
          "attachmentUrls": {
            "description": "Urls to files. Not all models support all file types.",
            "type": "array",
            "items": { "type": "string" }
          }
        },
        "required": ["message"]
      },

      "MessageResponse": {
        "type": "object",
        "properties": {
          "isSuccessful": {
            "type": "boolean"
          },

          "messages": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "content": { "type": "string" },
                "role": { "type": "string" },
                "function_call": { "type": "object" },
                "tool_calls": { "type": "array" }
              }
            }
          },

          "threadId": { "type": "string" }
        },
        "required": ["isSuccessful", "message"]
      }
    }
  }
}
