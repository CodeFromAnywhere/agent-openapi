admin.html: On this page the admin can see all their agents.

  First use window.prompt to get admin token prefilled from localStorage, that is saved to localStorage after (named 'adminToken').

  Then browse created agents using `/listAgents` endpoint.

  - Every agent links to user.html?agentSlug={slug}&agentToken={agentToken}
  - Every agent links to upsert.html?agentSlug={slug}
  - Every agent has a delete icon that will prompt 'are you sure' and deletes the agent using `/removeAgent`.

  On top of the page, there's a button 'new agent' that goes to upsert.html

  Make a mobile-friendly layout using tailwind css

upsert.html:
  On this page the admin can create a new agent, or update an existing one.

  Render the form to submit upsertToolAgent.

  Check if ?agentSlug query parameter exists, and if so, fetch `listAgents` using adminToken in `localStorage:adminToken`. Find the agent there. If found, prefil the form.

  Use tailwindcss and make the layout mobile friendly.

  If localStorage:adminToken isn't present, ask for it using window.prompt and set it.

user.html:
  First, window.prompt the userAuthToken and set it to localstorage:userAuthToken

  Get info from url - `?agentSlug=xxxx&agentToken=xxxx&threadId=xxxx` to oauth with token (X_AGENT_AUTH_TOKEN) and Authorization bearer token (localStorage:userAuthToken) and fetch `readAgentUser`

  Show all threads in a menu on the left, each of them linking to ?threadId=xxxx

  When clicking one, it should call `readAgentUserThread` for the threadId clicked. This results in the messages which then should be rendered at the screen.

  At the top there should be a form to create a new message and send it using `/message`. When sending this, immediately attach the sent message to messages, and wait for the fetch to respond and attach the resulting messages to messages as well. No need to reload `readAgentUserThread`.

  The website is written in pure HTML + CSS + JS and uses TailwindCSS for styles
